{"version":3,"file":"App.svelte","sources":["App.svelte"],"sourcesContent":["<script>\n  import { init } from 'dc-extensions-sdk';\n  import { fly } from 'svelte/transition';\n  import { offsetMinutesToString, pad } from './utils';\n  import Calendar from './components/Calendar.svelte';\n  import Clock from './components/Clock.svelte';\n  const now = new Date();\n  let date = nowDate();\n  let time = nowTime();\n  let editingDate = false;\n  let editingTime = false;\n  let type = 'string';\n  let format = 'date-time';\n  let showDate = true;\n  let showTime = true;\n  let unixMode = false;\n  let active = false;\n  let sdk;\n\n  (async () => {\n    try {\n      sdk = await init();\n      sdk.frame.startAutoResizer();\n      unixMode = sdk.params.installation.unix || sdk.params.instance.unix;\n      type = sdk.field.schema.type;\n      setState(sdk.field.schema.format);\n      const value = await sdk.field.getValue();\n      if (value === undefined) {\n        setDefaults();\n      } else {\n        active = true;\n      }\n      if (type === 'string') {\n        processStringInput(value);\n      } else if (type === 'number') {\n        processNumberInput(value);\n      }\n    } catch {}\n  })();\n\n  function setDefaults() {\n    switch (format) {\n      case 'date':\n        time = '00:00:00';\n        break;\n      case 'time':\n        date = '1970-01-01';\n        break;\n    }\n  }\n  function nowDate() {\n    return `${now.getFullYear()}-${pad(now.getMonth() + 1)}-${pad(\n      now.getDate()\n    )}`;\n  }\n\n  function nowTime() {\n    return `${pad(now.getHours())}:${pad(now.getMinutes())}:${pad(\n      now.getSeconds()\n    )}`;\n  }\n\n  function processStringInput(input) {\n    if (!input) {\n      return;\n    }\n    switch (format) {\n      case 'date-time':\n        [date, time] = input.split('T');\n        break;\n      case 'date':\n        date = input;\n        break;\n      case 'time':\n        time = input;\n        break;\n    }\n    time = time.substr(0, 8);\n  }\n\n  function getNegativeLocalOffset() {\n    return 0 - getLocalOffset();\n  }\n\n  function getLocalOffset() {\n    return new Date(dateString(date, time)).getTimezoneOffset();\n  }\n\n  function processNumberInput(input) {\n    if (input === undefined || input === null || isNaN(input)) {\n      return;\n    }\n    let stamp = unixMode ? input * 1000 : input;\n    let d = new Date(stamp);\n    let offset = d.getTimezoneOffset();\n    time = calculateTime(d, offset);\n    date =\n      pad(d.getFullYear()) +\n      '-' +\n      pad(d.getMonth() + 1) +\n      '-' +\n      pad(d.getDate());\n  }\n\n  function calculateTime(d, offset) {\n    const offsetInHours = Math.trunc(offset / 60);\n    const remainingOffset = offset % 60;\n    let offsetHours = d.getHours() + offsetInHours;\n    let offsetMinutes = d.getMinutes() + remainingOffset;\n    if (offsetMinutes < 0) {\n      offsetHours--;\n      offsetMinutes = 60 + offsetMinutes;\n    } else if (offsetMinutes > 59) {\n      offsetHours++;\n      offsetMinutes = offsetMinutes % 60;\n    }\n    if (offsetHours < 0) {\n      d.setDate(d.getDate() - 1);\n      offsetHours = 24 + offsetHours;\n    } else if (offsetHours > 23) {\n      d.setDate(d.getDate() + 1);\n      offsetHours = offsetHours % 24;\n    }\n    return `${pad(offsetHours)}:${pad(offsetMinutes)}:${pad(d.getSeconds())}`;\n  }\n\n  function setState(f) {\n    if (!f) {\n      return;\n    }\n    if (f == 'time') {\n      format = f;\n      showDate = false;\n    } else if (f == 'date') {\n      format = f;\n      showTime = false;\n    }\n  }\n\n  function processNumberOutput() {\n    let d = new Date(dateString(date, time));\n    return unixMode ? d.getTime() / 1000 : d.getTime();\n  }\n\n  function dateString(d, t, offset) {\n    let ds = '';\n    if (offset !== undefined) {\n      ds = d + 'T' + t + '.000' + offset;\n    } else {\n      ds = d + 'T' + t + '.000Z';\n    }\n    return ds;\n  }\n\n  function processStringOutput() {\n    switch (format) {\n      case 'date-time':\n        return dateString(\n          date,\n          time,\n          offsetMinutesToString(getNegativeLocalOffset())\n        );\n      case 'date':\n        return date;\n      case 'time':\n        return time + '.000Z';\n    }\n  }\n  function update() {\n    let val;\n    if (type === 'string') {\n      val = processStringOutput();\n    } else if (type === 'number') {\n      val = processNumberOutput();\n    }\n    active = true;\n    if (sdk && val !== undefined) {\n      sdk.field.setValue(val);\n    }\n  }\n\n  function toggle(component) {\n    if (component === 'date') {\n      if (editingDate) {\n        editingDate = false;\n      } else {\n        editingDate = true;\n        editingTime = false;\n      }\n    }\n    if (component === 'time') {\n      if (editingTime) {\n        editingTime = false;\n      } else {\n        editingTime = true;\n        editingDate = false;\n      }\n    }\n  }\n</script>\n\n<main>\n  {#if sdk && sdk.field && sdk.field.schema && sdk.field.schema.title}\n    <div class=\"label\">\n      <p>{sdk.field.schema.title}:</p>\n    </div>\n  {/if}\n  {#if showDate}\n    <div class=\"date\" on:click={() => toggle('date')}>\n      <img src=\"./icons/calendar.svg\" alt=\"calendar icon\" />\n      <p class={active ? 'active' : ''}>\n        {new Date(\n          dateString(\n            date,\n            time,\n            offsetMinutesToString(getNegativeLocalOffset())\n          )\n        ).toLocaleDateString()}\n      </p>\n    </div>\n  {/if}\n  {#if showTime}\n    <div class=\"time\" on:click={() => toggle('time')}>\n      <img src=\"./icons/clock.svg\" alt=\"calendar icon\" />\n      <p class={active ? 'active' : ''}>\n        {new Date(\n          dateString(\n            date,\n            time,\n            offsetMinutesToString(getNegativeLocalOffset())\n          )\n        ).toLocaleTimeString()}\n      </p>\n    </div>\n  {/if}\n  <div class=\"clear\" />\n  {#if editingDate}\n    <div class=\"editor\" in:fly={{ x: -500, duration: 500 }}>\n      <Calendar\n        {date}\n        on:hide={() => (editingDate = false)}\n        on:update={(d) => (date = d.detail) && update()}\n      />\n    </div>\n  {/if}\n  {#if editingTime}\n    <div class=\"editor\" in:fly={{ x: -500, duration: 500 }}>\n      <Clock\n        {time}\n        on:hide={() => (editingTime = false)}\n        on:update={(d) => (time = d.detail) && update()}\n      />\n    </div>\n  {/if}\n  <div class=\"clear\" />\n</main>\n\n<style>\n  img {\n    height: 2em;\n  }\n\n  p {\n    text-decoration: underline;\n    height: 2em;\n    line-height: 2em;\n    padding: 0;\n    margin: 0;\n  }\n\n  img {\n    padding-right: 0.25em;\n  }\n\n  img,\n  p {\n    float: left;\n  }\n\n  .date,\n  .time,\n  .label {\n    display: inline-block;\n    margin: 0.25em;\n    cursor: pointer;\n  }\n\n  .date p,\n  .time p {\n    color: #999;\n  }\n\n  p.active {\n    color: #333;\n  }\n  .label p {\n    text-decoration: none;\n    cursor: default;\n  }\n\n  .clear {\n    clear: both;\n  }\n\n  main {\n    overflow: hidden;\n  }\n</style>\n"],"names":[],"mappings":"AAkQE,GAAG,8BAAC,CAAC,AACH,MAAM,CAAE,GAAG,AACb,CAAC,AAED,CAAC,8BAAC,CAAC,AACD,eAAe,CAAE,SAAS,CAC1B,MAAM,CAAE,GAAG,CACX,WAAW,CAAE,GAAG,CAChB,OAAO,CAAE,CAAC,CACV,MAAM,CAAE,CAAC,AACX,CAAC,AAED,GAAG,8BAAC,CAAC,AACH,aAAa,CAAE,MAAM,AACvB,CAAC,AAED,iCAAG,CACH,CAAC,8BAAC,CAAC,AACD,KAAK,CAAE,IAAI,AACb,CAAC,AAED,mCAAK,CACL,mCAAK,CACL,MAAM,8BAAC,CAAC,AACN,OAAO,CAAE,YAAY,CACrB,MAAM,CAAE,MAAM,CACd,MAAM,CAAE,OAAO,AACjB,CAAC,AAED,oBAAK,CAAC,gBAAC,CACP,oBAAK,CAAC,CAAC,eAAC,CAAC,AACP,KAAK,CAAE,IAAI,AACb,CAAC,AAED,CAAC,OAAO,8BAAC,CAAC,AACR,KAAK,CAAE,IAAI,AACb,CAAC,AACD,qBAAM,CAAC,CAAC,eAAC,CAAC,AACR,eAAe,CAAE,IAAI,CACrB,MAAM,CAAE,OAAO,AACjB,CAAC,AAED,MAAM,8BAAC,CAAC,AACN,KAAK,CAAE,IAAI,AACb,CAAC,AAED,IAAI,8BAAC,CAAC,AACJ,QAAQ,CAAE,MAAM,AAClB,CAAC"}